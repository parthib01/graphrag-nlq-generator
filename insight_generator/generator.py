'''
import requests
import json
import os
from dotenv import load_dotenv
load_dotenv()
# Read API key from environment variable
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# Ensure key is present
if not GEMINI_API_KEY:
    raise ValueError("GEMINI_API_KEY not set. Please set it as an environment variable.")

# Choose model
API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent"

def generate_insight(user_query, sql_result):
    result_text = json.dumps(sql_result, indent=2)

    prompt = f"""
You are an assistant that summarizes SQL query results for business users in simple English.

The user asked:
\"{user_query}\"

The SQL query returned the following result:
{result_text}

Write a clear, concise, natural language summary of this result. Be brief but informative.
"""

    payload = {
        "contents": [
            {
                "parts": [
                    {"text": prompt}
                ]
            }
        ]
    }

    headers = {
        "Content-Type": "application/json"
    }

    try:
        response = requests.post(f"{API_URL}?key={GEMINI_API_KEY}", headers=headers, json=payload)
        if response.status_code != 200:
            return f"Error from Gemini API: {response.text}"

        result = response.json()
        candidates = result.get("candidates", [])

        if candidates:
            generated_text = candidates[0]["content"]["parts"][0]["text"]
            return generated_text.strip()
        else:
            return "Sorry, I couldn't generate a response."

    except Exception as e:
        return f"Error generating insight: {str(e)}"
'''


import requests
import json
import os
from dotenv import load_dotenv

load_dotenv()

# Read API key from environment variable
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    raise ValueError("GEMINI_API_KEY not set. Please set it in your environment.")

# Gemini Flash endpoint
API_URL = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent"

def generate_insight(user_query: str, sql_result: list) -> str:
    if not sql_result:
        return "No results were returned by the SQL query."

    try:
        # Prepare the prompt
        result_text = json.dumps(sql_result, indent=2)
        prompt = f"""
You are an assistant that summarizes SQL query results for business users in simple English.

The user asked:
\"{user_query}\"

The SQL query returned the following result:
{result_text}

Write a clear, concise, natural language summary of this result. Be brief but informative.
"""

        payload = {
            "contents": [
                {
                    "parts": [{"text": prompt}]
                }
            ]
        }

        headers = {"Content-Type": "application/json"}

        response = requests.post(f"{API_URL}?key={GEMINI_API_KEY}", headers=headers, json=payload)

        if response.status_code != 200:
            return f"Gemini API Error ({response.status_code}): {response.text}"

        result = response.json()
        candidates = result.get("candidates", [])

        if not candidates:
            return "No summary generated by Gemini."

        # Extract generated insight
        parts = candidates[0].get("content", {}).get("parts", [])
        if parts and "text" in parts[0]:
            return parts[0]["text"].strip()

        return "Unexpected Gemini response format."

    except Exception as e:
        return f"‚ùå Error generating insight: {str(e)}"

